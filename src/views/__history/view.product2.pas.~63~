unit view.product2;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, view.base.lists, Data.DB,
  System.ImageList, Vcl.ImgList, Vcl.Grids, Vcl.DBGrids, Vcl.WinXPanels,
  Vcl.Buttons, Vcl.StdCtrls, Vcl.ExtCtrls, Service.Register, Vcl.Mask,
  Vcl.DBCtrls, Vcl.WinXCtrls, Vcl.ComCtrls, Service.Connection;

type
  TviewProducts = class(TviewBaseLists)
    cbActive: TDBCheckBox;
    edtBrand: TDBEdit;
    edtCategory: TDBEdit;
    edtDateReg: TDBEdit;
    edtDateUp: TDBEdit;
    edtDescription: TDBEdit;
    edtIdProd: TDBEdit;
    edtName: TDBEdit;
    edtSupplier: TDBEdit;
    edtUn: TDBEdit;
    edtUserReg: TDBEdit;
    edtUserUp: TDBEdit;
    Label1: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    cbActiveAsk: TCheckBox;
    DateTimePicker1: TDateTimePicker;
    edtBrandAsk: TSearchBox;
    edtCategoryAsk: TSearchBox;
    edtDateBirth: TDateTimePicker;
    edtNameAsk: TSearchBox;
    edtSupplierAsk: TSearchBox;
    edtUnAsk: TSearchBox;
    edtUserRegAsk: TSearchBox;
    edtUserUpAsk: TSearchBox;
    lblCityAsk: TLabel;
    lblDateBirthAsk: TLabel;
    lblDateRegAsk: TLabel;
    lblEmailAsk: TLabel;
    lblFantasyAsk: TLabel;
    lblNameAsk: TLabel;
    lblPhoneAsk: TLabel;
    lblStateAsk: TLabel;
    lblZipAsk: TLabel;
    btnResetTypes: TButton;
    procedure btnCancelClick(Sender: TObject);
    procedure btnCloseWindowClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure btnEditClick(Sender: TObject);
    procedure btnNewClick(Sender: TObject);
    procedure btnSaveClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure edtNameAskInvokeSearch(Sender: TObject);
    procedure edtCategoryAskInvokeSearch(Sender: TObject);
    procedure edtSupplierAskInvokeSearch(Sender: TObject);
    procedure edtBrandAskInvokeSearch(Sender: TObject);
    procedure edtUnAskInvokeSearch(Sender: TObject);
    procedure edtUserRegAskInvokeSearch(Sender: TObject);
    procedure edtUserUpAskInvokeSearch(Sender: TObject);
    procedure btnResetTypesClick(Sender: TObject);
    procedure cbActiveAskClick(Sender: TObject);
    procedure checkTypeFilters;
  private
    { Private declarations }
  public
    procedure Get_Product();
  end;

var
  viewProducts: TviewProducts;

implementation

{$R *.dfm}

{ TviewBaseLists1 }

procedure TviewProducts.btnCancelClick(Sender: TObject);
begin
  inherited;

  if ServiceRegister.QRYProduct.State in dsEditModes then
  begin
    ServiceRegister.QRYProduct.Cancel;
    CardPanelList.ActiveCard := cardSearch;
  end;

end;

procedure TviewProducts.btnCloseWindowClick(Sender: TObject);
begin
  inherited;
  viewProducts.Close;
end;

procedure TviewProducts.btnDeleteClick(Sender: TObject);
begin
  inherited;

  if ServiceRegister.QRYProduct.RecordCount > 0 then
  begin
    ServiceRegister.QRYProduct.Delete;
    ShowMessage('Record deleted successfully');
    CardPanelList.ActiveCard := cardSearch;
  end;

end;

procedure TviewProducts.btnEditClick(Sender: TObject);
begin
  inherited;

  CardPanelList.ActiveCard := cardRegister;
  edtName.SetFocus;
  ServiceRegister.QRYProduct.Edit;
  edtDateUp.Text := DateToStr(Date);

end;



procedure TviewProducts.btnNewClick(Sender: TObject);
VAR

  maxID : integer;

begin
  inherited;

  CardPanelList.ActiveCard := cardRegister;
  edtName.SetFocus;
  ServiceRegister.QRYProduct.Insert;
  ServiceRegister.QRYIDProd.Close;
  ServiceRegister.QRYIDProd.SQL.Text := 'SELECT MAX(PROD_ID) AS MaxID FROM PRODUCT';
  ServiceRegister.QRYIDProd.Open;
  if not ServiceRegister.QRYIDProd.FieldByName('MaxID').IsNull then
    maxID := ServiceRegister.QRYIDProd.FieldByName('MaxID').AsInteger + 1
  else
    maxID := 1;
  edtIdProd.Field.Value := maxID;
  edtDateReg.Text := DateToStr(Date);
  cbActive.State := cbChecked;

end;

procedure TviewProducts.btnResetTypesClick(Sender: TObject);
begin
  inherited;
  cbActive.State := cbActive;
end;

procedure TviewProducts.btnSaveClick(Sender: TObject);
begin
  inherited;

  if ServiceRegister.QRYProduct.State in dsEditModes then
  begin

    ServiceRegister.QRYProduct.FieldByName('COM_ID').AsString := ServiceConnection.SERVICE_COM_ID;
    ServiceRegister.QRYProduct.FieldByName('USER').AsString := ServiceConnection.SERVICE_USER;
    ServiceRegister.QRYProduct.Post;
    ShowMessage('Registered successfully!');
    CardPanelList.ActiveCard := cardSearch;

  end;

end;

procedure TviewProducts.cbActiveAskClick(Sender: TObject);
begin
  inherited;
  checkTypeFilters;
end;

procedure TviewProducts.checkTypeFilters;
var
  SQLBase: string;
  Filters: string;
begin
  SQLBase := 'SELECT * FROM PRODUCT WHERE 1=1';

  if cbActive.State = cbChecked then
    Filters := Filters + ' AND ACTIVE = TRUE'
  else if cbActive.State = cbUnchecked then
    Filters := Filters + ' AND ACTIVE = FALSE';

  ServiceRegister.QRYProduct.Close;
  ServiceRegister.QRYProduct.SQL.Text := SQLBase + Filters;
  ServiceRegister.QRYProduct.Open;
end;

procedure TviewProducts.edtBrandAskInvokeSearch(Sender: TObject);
begin
  inherited;
  ServiceRegister.QRYProduct.Close;
  ServiceRegister.QRYProduct.SQL.Add(' AND BRAND LIKE :BRAND');
  ServiceRegister.QRYProduct.ParamByName('BRAND').AsString := '%' + edtBrandAsk.Text + '%';
  ServiceRegister.QRYProduct.Open;
end;

procedure TviewProducts.edtCategoryAskInvokeSearch(Sender: TObject);
begin
  inherited;
  ServiceRegister.QRYProduct.Close;
  ServiceRegister.QRYProduct.SQL.Add(' AND CATEGORY LIKE :CATEGORY');
  ServiceRegister.QRYProduct.ParamByName('CATEGORY').AsString := '%' + edtCategoryAsk.Text + '%';
  ServiceRegister.QRYProduct.Open;
end;

procedure TviewProducts.edtNameAskInvokeSearch(Sender: TObject);
begin
  inherited;
  ServiceRegister.QRYProduct.Close;
  ServiceRegister.QRYProduct.SQL.Add(' AND NAME LIKE :NAME');
  ServiceRegister.QRYProduct.ParamByName('NAME').AsString := '%' + edtNameAsk.Text + '%';
  ServiceRegister.QRYProduct.Open;
end;

procedure TviewProducts.edtSupplierAskInvokeSearch(Sender: TObject);
begin
  inherited;
  ServiceRegister.QRYProduct.Close;
  ServiceRegister.QRYProduct.SQL.Add(' AND SUPPLIER LIKE :SUPPLIER');
  ServiceRegister.QRYProduct.ParamByName('SUPPLIER').AsString := '%' + edtNameAsk.Text + '%';
  ServiceRegister.QRYProduct.Open;
end;

procedure TviewProducts.edtUnAskInvokeSearch(Sender: TObject);
begin
  inherited;
  ServiceRegister.QRYProduct.Close;
  ServiceRegister.QRYProduct.SQL.Add(' AND UN LIKE :UN');
  ServiceRegister.QRYProduct.ParamByName('UN').AsString := '%' + edtUnAsk.Text + '%';
  ServiceRegister.QRYProduct.Open;
end;

procedure TviewProducts.edtUserRegAskInvokeSearch(Sender: TObject);
begin
  inherited;
  ServiceRegister.QRYProduct.Close;
  ServiceRegister.QRYProduct.SQL.Add(' AND USER_ID LIKE :USER');
  ServiceRegister.QRYProduct.ParamByName('USER').AsString := '%' + edtUserReg.Text + '%';
  ServiceRegister.QRYProduct.Open;
end;

procedure TviewProducts.edtUserUpAskInvokeSearch(Sender: TObject);
begin
  inherited;
  ServiceRegister.QRYProduct.Close;
  ServiceRegister.QRYProduct.SQL.Add(' AND USER_UPDATE LIKE :USER');
  ServiceRegister.QRYProduct.ParamByName('USER').AsString := '%' + edtUserUp.Text + '%';
  ServiceRegister.QRYProduct.Open;
end;

procedure TviewProducts.FormCreate(Sender: TObject);
begin
  inherited;

  CardPanelList.ActiveCard := cardSearch;

end;

procedure TviewProducts.FormShow(Sender: TObject);
begin
  inherited;

  Get_Product;

end;

procedure TviewProducts.Get_Product;
begin

  ServiceRegister.QRYProduct.Close;
  ServiceRegister.QRYProduct.SQL.Clear;
  ServiceRegister.QRYProduct.SQL.Add('SELECT * FROM PRODUCT WHERE 1=1');
  ServiceRegister.QRYProduct.Open();

end;

end.
