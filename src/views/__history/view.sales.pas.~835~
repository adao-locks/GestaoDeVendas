unit view.sales;

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  view.base.lists,
  Data.DB,
  System.ImageList,
  Vcl.ImgList,
  Vcl.Grids,
  Vcl.DBGrids,
  Vcl.WinXPanels,
  Vcl.Buttons,
  Vcl.StdCtrls,
  Vcl.ExtCtrls,
  Service.Register,
  Vcl.Mask,
  Vcl.DBCtrls,
  Data.FMTBcd,
  Data.SqlExpr,
  Service.Connection,
  Vcl.ComCtrls, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.WinXCtrls, FireDAC.Stan.Async,
  FireDAC.DApt, view.entity;

type
  TviewSales = class(TviewBaseLists)
    Label1: TLabel;
    edtSale: TDBEdit;
    Label2: TLabel;
    edtClient: TDBEdit;
    Label3: TLabel;
    edtEmployee: TDBEdit;
    Label4: TLabel;
    Label5: TLabel;
    edtPayMeth: TDBEdit;
    Label6: TLabel;
    edtDisc: TDBEdit;
    Label7: TLabel;
    edtTot: TDBEdit;
    Label8: TLabel;
    edtStat: TDBEdit;
    Label9: TLabel;
    edtObs: TDBEdit;
    Label10: TLabel;
    DT_SALE: TDateTimePicker;
    DT_CREATED: TDateTimePicker;
    lblEmployee: TLabel;
    lblClient: TLabel;
    Label11: TLabel;
    edtCom: TDBEdit;
    Label12: TLabel;
    edtUser: TDBEdit;
    btnProducts: TButton;
    cardItems: TCard;
    DSDataItems: TDataSource;
    DBGrid1: TDBGrid;
    lblCityAsk: TLabel;
    lblDateBirthAsk: TLabel;
    lblDateRegAsk: TLabel;
    lblEmailAsk: TLabel;
    lblFantasyAsk: TLabel;
    lblNameAsk: TLabel;
    lblPhoneAsk: TLabel;
    lblStateAsk: TLabel;
    lblZipAsk: TLabel;
    dtRegIni: TDateTimePicker;
    edtBrandAsk: TSearchBox;
    edtCategoryAsk: TSearchBox;
    dtRegEnd: TDateTimePicker;
    edtNameAsk: TSearchBox;
    edtSupplierAsk: TSearchBox;
    edtUnAsk: TSearchBox;
    edtUserRegAsk: TSearchBox;
    edtUserUpAsk: TSearchBox;
    btnConsult: TButton;
    pnlContent: TPanel;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    Label17: TLabel;
    Label18: TLabel;
    Label20: TLabel;
    lblNameProd: TLabel;
    lblConfirmItem: TLabel;
    edtIDItem: TDBEdit;
    edtSaleID: TDBEdit;
    edtCodProd: TDBEdit;
    edtQuant: TDBEdit;
    edtUnit: TDBEdit;
    edtDiscItem: TDBEdit;
    DT_CREATED_ITEM: TDateTimePicker;
    btnAddProd: TButton;
    btnRemove: TButton;
    btnConfirmItem: TButton;
    btnCancelItem: TButton;
    btnBackItens: TButton;
    Label19: TLabel;
    edtID: TDBEdit;
    ComboMethod: TComboBox;
    ComboStatus: TComboBox;
    btnCreateEntity1: TButton;
    btnCreateEntity2: TButton;
    procedure FormShow(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    procedure btnCloseWindowClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure btnEditClick(Sender: TObject);
    procedure btnNewClick(Sender: TObject);
    procedure btnSaveClick(Sender: TObject);
    procedure btnCreateEntity(Sender: TObject);
    procedure btnAddProdClick(Sender: TObject);
    procedure edtClientChange(Sender: TObject);
    procedure edtEmployeeChange(Sender: TObject);
    procedure edtCodProdChange(Sender: TObject);
    procedure btnConfirmItemClick(Sender: TObject);
    procedure btnRemoveClick(Sender: TObject);
    procedure btnCancelItemClick(Sender: TObject);
    procedure btnBackItensClick(Sender: TObject);
    procedure btnCreateEntityClick(Sender: TObject);
  private
    { Private declarations }
  public
    procedure Get_Sales();
    procedure Get_Itens();
  end;

var
  viewSales: TviewSales;

implementation

{$R *.dfm}

procedure TviewSales.btnAddProdClick(Sender: TObject);
var
  id : integer;
  maxID : integer;
begin
  inherited;
    CardPanelList.ActiveCard := cardItems;
    ServiceRegister.QRYItemsSale.Insert;

    edtSaleID.Field.Value := edtSale.Text;



    ServiceRegister.QRYIDItemsSale.Close;
    ServiceRegister.QRYIDItemsSale.SQL.Text :=
      'SELECt MAX(ID_ITEM) MAXID FROM SALE_ITEMS WHERE ID_SALE = :ID_SALE';
    ServiceRegister.QRYIDItemsSale.ParamByName('ID_SALE').asString :=
      edtSale.Text;
    ServiceRegister.QRYIDItemsSale.Open;
    if not ServiceRegister.QRYIDItemsSale.FieldByName('MAXID').IsNull then
      edtIDItem.Field.Value := ServiceRegister.QRYIDItemsSale.FieldByName
        ('MAXID').AsInteger + 1
    else
      edtIDItem.Field.Value := 1;



    ServiceRegister.QRYIDItems.Close;
    ServiceRegister.QRYIDItems.SQL.Text := 'SELECt MAX(ID) MAXID FROM SALE_ITEMS WHERE 1=1';
    ServiceRegister.QRYIDItems.Open;
    if not ServiceRegister.QRYIDItems.FieldByName('MAXID').IsNull then
      edtID.Field.Value := ServiceRegister.QRYIDItems.FieldByName
        ('MAXID').AsInteger + 1
    else
      edtID.Field.Value := 1;



    DT_CREATED.Date := Now;
    edtCodProd.Enabled := True;
    edtUnit.Enabled := True;
    edtQuant.Enabled := True;
    edtDiscItem.Enabled := True;
    DT_CREATED_ITEM.Date := Now;
    btnConfirmItem.Enabled := True;
    btnCancelItem.Enabled := True;
    btnRemove.Enabled := False;
end;

procedure TviewSales.btnBackItensClick(Sender: TObject);
begin
  inherited;
  CardPanelList.ActiveCard := cardRegister;
end;

procedure TviewSales.btnCancelClick(Sender: TObject);
begin
  inherited;
  if ServiceRegister.QRYSale.State in dsEditModes then
  begin
    ServiceRegister.QRYSale.Cancel;
    ServiceRegister.QRYItemsSale.Cancel;
    CardPanelList.ActiveCard := cardSearch;
  end;
end;

procedure TviewSales.btnCancelItemClick(Sender: TObject);
begin
  inherited;
  if ServiceRegister.QRYItemsSale.State in dsEditModes then
  begin
    ServiceRegister.QRYItemsSale.Cancel;
    btnConfirmItem.Enabled := False;
    btnCancelItem.Enabled := False;
  end;
end;

procedure TviewSales.btnCloseWindowClick(Sender: TObject);
begin
  inherited;
  viewSales.Close;
end;

procedure TviewSales.btnConfirmItemClick(Sender: TObject);
begin
  inherited;
  ServiceRegister.QRYItemsSale.FieldByName('DT_CREATED').AsDateTime :=
    DT_CREATED_ITEM.DateTime;
  ServiceRegister.QRYItemsSale.Post;
  Get_Itens;
  lblConfirmItem.Caption := 'Item registered successfully';
  btnConfirmItem.Enabled := False;
  btnCancelItem.Enabled := False;
end;

procedure TviewSales.btnDeleteClick(Sender: TObject);
begin
  inherited;
  if ServiceRegister.QRYSale.RecordCount > 0 then
  begin
    ServiceRegister.QRYSale.Delete;
    ShowMessage('Record deleted successfully');
    CardPanelList.ActiveCard := cardSearch;
  end;
end;

procedure TviewSales.btnEditClick(Sender: TObject);
begin
  inherited;
  CardPanelList.ActiveCard := cardRegister;
  ServiceRegister.QRYSale.Edit;
end;

procedure TviewSales.btnNewClick(Sender: TObject);
var
  maxID: Integer;
begin
  inherited;
  CardPanelList.ActiveCard := cardRegister;
  edtClient.SetFocus;
  ServiceRegister.QRYSale.Insert;
  ServiceRegister.QRYIDSale.Close;
  ServiceRegister.QRYIDSale.SQL.Text :=
    'SELECT MAX(ID_SALE) AS MaxID FROM SALE WHERE 1=1';
  ServiceRegister.QRYIDSale.Open;
  if not ServiceRegister.QRYIDSale.FieldByName('MaxID').IsNull then
    maxID := ServiceRegister.QRYIDSale.FieldByName('MaxID').AsInteger + 1
  else
    maxID := 1;
  edtSale.Text := maxID.ToString;
  DT_SALE.Date := Now;
  DT_CREATED.Date := Now;
  edtCom.Field.Value := ServiceConnection.SERVICE_COM_ID;
  edtUser.Text := ServiceConnection.SERVICE_USER;
  edtDisc.Field.Value := 0;
  edtTot.Field.Value := 0;
  edtPayMeth.Text := 'CASH';
  edtStat.Text := 'PENDING';
end;

procedure TviewSales.btnCreateEntity(Sender: TObject);
begin
  inherited;
  CardPanelList.ActiveCard := cardItems;
  Get_Itens;
end;

procedure TviewSales.btnCreateEntityClick(Sender: TObject);
begin
  inherited;
  viewEntity := TviewEntity.Create(Self);
  CardPanelList.ActiveCard := cardRegister;

  viewEntity.Left := (Screen.Width) div 4;
  viewEntity.Top := (Screen.Height) div 4;

  viewEntity.ShowModal;
end;

procedure TviewSales.btnRemoveClick(Sender: TObject);
begin
  inherited;
  if ServiceRegister.QRYItemsSale.RecordCount > 0 then
  begin
    ServiceRegister.QRYItemsSale.Delete;
    ShowMessage('Product deleted successfully');
  end;
end;

procedure TviewSales.btnSaveClick(Sender: TObject);
begin
  inherited;
  if ServiceRegister.QRYSale.State in dsEditModes then
  begin
    ServiceRegister.QRYSale.FieldByName('PAYMENT_METHOD').AsString := ComboMethod.Text;
    ServiceRegister.QRYSale.FieldByName('STATUS').AsString := ComboStatus.Text;
    ServiceRegister.QRYSale.FieldByName('DT_SALE').AsDateTime :=
      DT_SALE.DateTime;
    ServiceRegister.QRYSale.FieldByName('DT_CREATED').AsDateTime :=
      DT_CREATED.DateTime;
    ServiceRegister.QRYSale.Post;
    ShowMessage('Registered successfully!');
    CardPanelList.ActiveCard := cardSearch;
  end;
end;

procedure TviewSales.edtCodProdChange(Sender: TObject);
begin
  inherited;
  if Trim(edtCodProd.Text) = '' then
  begin
    lblNameProd.Caption := 'PRODUCT NAME';
    Exit;
  end;

  ServiceRegister.QRYNameProduct.Close;
  ServiceRegister.QRYNameProduct.SQL.Text :=
    'SELECT NAME FROM PRODUCT WHERE PROD_ID = :PROD_ID';
  ServiceRegister.QRYNameProduct.ParamByName('PROD_ID').AsInteger :=
    StrToIntDef(edtCodProd.Text, 0);
  ServiceRegister.QRYNameProduct.Open;

  if not ServiceRegister.QRYNameProduct.IsEmpty then
    lblNameProd.Caption := ServiceRegister.QRYNameProduct.FieldByName
      ('NAME').AsString
  else
    lblNameProd.Caption := 'PRODUCT NOT FOUND!';
end;

procedure TviewSales.edtClientChange(Sender: TObject);
begin
  inherited;
  if Trim(edtClient.Text) = '' then
  begin
    lblClient.Caption := 'CLIENT NAME';
    btnCreateEntity1.Visible := False;
    Exit;
  end;

  ServiceRegister.QRYNamePeople.Close;
  ServiceRegister.QRYNamePeople.SQL.Text :=
    'SELECT NAME FROM PEOPLE WHERE PEOPLE_ID = :ID AND CLIENT = TRUE';
  ServiceRegister.QRYNamePeople.ParamByName('ID').AsInteger :=
    StrToIntDef(edtClient.Text, 0);
  ServiceRegister.QRYNamePeople.Open;

  if not ServiceRegister.QRYNamePeople.IsEmpty then
  begin
    lblClient.Caption := ServiceRegister.QRYNamePeople.FieldByName
      ('NAME').AsString;
    btnCreateEntity1.Visible := False;
  end
  else
  begin
    lblClient.Caption := 'CLIENT NOT FOUND!';
    btnCreateEntity1.Visible := True;
  end;
end;

procedure TviewSales.edtEmployeeChange(Sender: TObject);
begin
  inherited;
  if Trim(edtEmployee.Text) = '' then
  begin
    lblEmployee.Caption := 'EMPLOYEE NAME';
    btnCreateEntity2.Visible := False;
    Exit;
  end;

  ServiceRegister.QRYNamePeople.Close;
  ServiceRegister.QRYNamePeople.SQL.Clear;
  ServiceRegister.QRYNamePeople.SQL.Add
    ('SELECT NAME FROM PEOPLE WHERE PEOPLE_ID = :ID AND EMPLOYEE = TRUE');
  ServiceRegister.QRYNamePeople.ParamByName('ID').AsInteger :=
    StrToIntDef(edtEmployee.Text, 0);
  ServiceRegister.QRYNamePeople.Open;

  if not ServiceRegister.QRYNamePeople.IsEmpty then
  begin
    lblEmployee.Caption := ServiceRegister.QRYNamePeople.FieldByName
      ('NAME').AsString;
    btnCreateEntity2.Visible := False;
  end
  else
  begin
    lblEmployee.Caption := 'EMPLOYEE NOT FOUND!';
    btnCreateEntity2.Visible := True;
  end;
end;

procedure TviewSales.FormShow(Sender: TObject);
begin
  inherited;
  Get_Sales;
  CardPanelList.ActiveCard := cardSearch;
end;

procedure TviewSales.Get_Itens;
begin
  ServiceRegister.QRYItemsSale.Close;
  ServiceRegister.QRYItemsSale.SQL.Clear;
  ServiceRegister.QRYItemsSale.SQL.Add
    ('SELECT SI.ID, SI.ID_ITEM, SI.ID_SALE, SI.ID_PRODUCT, P.NAME, P.BRAND, P.UN, SI.QUANTITY, SI.UNIT_PRICE, SI.DISCOUNT, ((SI.UNIT_PRICE * SI.QUANTITY) - SI.DISCOUNT) AS SUBTOTAL, SI.DT_CREATED FROM SALE_ITEMS SI INNER JOIN PRODUCT P ON SI.ID_PRODUCT = P.PROD_ID WHERE ID_SALE = :ID_SALE');
  ServiceRegister.QRYItemsSale.ParamByName('ID_SALE').AsString := edtSale.Text;
  ServiceRegister.QRYItemsSale.Open();
end;

procedure TviewSales.Get_Sales;
begin
  ServiceRegister.QRYSale.Close;
  ServiceRegister.QRYSale.SQL.Clear;
  ServiceRegister.QRYSale.SQL.Add
    ('SELECT SL.ID_SALE, SL.ID_CLIENT, PO1.NAME NAME_CLI, SL.ID_EMPLOYEE, PO2.NAME NAME_EMPL, SL.PAYMENT_METHOD, SL.TOTAL_AMOUNT, SL.DISCOUNT, SL.STATUS, SL.DT_SALE, SL.DT_CREATED, SL.ID_COM, SL."USER", SL.OBSERVATION FROM SALE SL INNER JOIN PEOPLE PO1 ON SL.ID_CLIENT = PO1.PEOPLE_ID INNER JOIN PEOPLE PO2 ON SL.ID_EMPLOYEE = PO2.PEOPLE_ID WHERE 1 = 1');
  ServiceRegister.QRYSale.Open();
end;

end.
