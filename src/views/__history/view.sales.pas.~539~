unit view.sales;

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  view.base.lists,
  Data.DB,
  System.ImageList,
  Vcl.ImgList,
  Vcl.Grids,
  Vcl.DBGrids,
  Vcl.WinXPanels,
  Vcl.Buttons,
  Vcl.StdCtrls,
  Vcl.ExtCtrls,
  Service.Register,
  Vcl.Mask,
  Vcl.DBCtrls,
  Data.FMTBcd,
  Data.SqlExpr,
  Service.Connection,
  Vcl.ComCtrls;

type
  TviewSales = class(TviewBaseLists)
    Label1: TLabel;
    edtSaleId: TDBEdit;
    Label2: TLabel;
    edtCliId: TDBEdit;
    Label3: TLabel;
    edtEmpId: TDBEdit;
    Label4: TLabel;
    edtIdProd: TDBEdit;
    Label5: TLabel;
    edtUnit: TDBEdit;
    Label6: TLabel;
    edtTotal: TDBEdit;
    Label7: TLabel;
    edtQtde: TDBEdit;
    Label8: TLabel;
    edtAddit: TDBEdit;
    Label9: TLabel;
    edtDisc: TDBEdit;
    Label10: TLabel;
    edtSubt: TDBEdit;
    Label15: TLabel;
    lblNameProduct: TLabel;
    lblEmployeeName: TLabel;
    lblClientName: TLabel;
    DTPDateSale: TDateTimePicker;
    Label16: TLabel;
    Label17: TLabel;
    edtComId: TDBEdit;
    richObs: TRichEdit;
    pnlPaid: TPanel;
    lblChange: TLabel;
    lbl1stInst: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    cbPaid: TDBCheckBox;
    cbCash: TDBCheckBox;
    edtChange: TDBEdit;
    cbInstall: TDBCheckBox;
    edtValInst: TDBEdit;
    edtInstAmount: TDBEdit;
    DTPInstall: TDateTimePicker;
    procedure FormShow(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    procedure btnCloseWindowClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure btnEditClick(Sender: TObject);
    procedure btnNewClick(Sender: TObject);
    procedure btnSaveClick(Sender: TObject);
    procedure cbPaidClick(Sender: TObject);
    procedure edtCliIdChange(Sender: TObject);
    procedure edtEmpIdChange(Sender: TObject);
    procedure edtIdProdChange(Sender: TObject);
    procedure edtTotalEnter(Sender: TObject);
    procedure edtSubtEnter(Sender: TObject);
    procedure cbCashClick(Sender: TObject);
    procedure cbInstallClick(Sender: TObject);
  private
    { Private declarations }
  public
    procedure Get_Sales();
  end;

var
  viewSales: TviewSales;

implementation

{$R *.dfm}

procedure TviewSales.btnCancelClick(Sender: TObject);
begin
  inherited;
  if ServiceRegister.QRYSale.State in dsEditModes then
  begin
    ServiceRegister.QRYSale.Cancel;
    CardPanelList.ActiveCard := cardSearch;
  end;
end;

procedure TviewSales.btnCloseWindowClick(Sender: TObject);
begin
  inherited;
  viewSales.Close;
end;

procedure TviewSales.btnDeleteClick(Sender: TObject);
begin
  inherited;
  if ServiceRegister.QRYSale.RecordCount > 0 then
  begin
    ServiceRegister.QRYSale.Delete;
    ShowMessage('Record deleted successfully');
    CardPanelList.ActiveCard := cardSearch;
  end;
end;

procedure TviewSales.btnEditClick(Sender: TObject);
begin
  inherited;
  CardPanelList.ActiveCard := cardRegister;
  ServiceRegister.QRYSale.Edit;
end;

procedure TviewSales.btnNewClick(Sender: TObject);
var
  maxID : Integer;
begin
  inherited;
  CardPanelList.ActiveCard := cardRegister;
  ServiceRegister.QRYSale.Insert;
  edtCliId.SetFocus;
  ServiceRegister.QRYIDSale.Close;
  ServiceRegister.QRYIDSale.SQL.Text := 'SELECT MAX(SALE_ID) AS MaxID FROM SALE WHERE 1=1';
  ServiceRegister.QRYIDSale.Open;
  if not ServiceRegister.QRYIDSale.FieldByName('MaxID').IsNull then
    maxID := ServiceRegister.QRYIDSale.FieldByName('MaxID').AsInteger + 1
  else
    maxID := 1;
  edtSaleId.Text := maxID.ToString;
  DTPDateSale.Date := Now;
  edtComId.Field.Value := ServiceConnection.SERVICE_COM_ID.ToInteger;
  edtUnit.Field.Value := 0;
  edtQtde.Field.Value := 0;
  edtTotal.Field.Value := 0;
  edtAddit.Field.Value := 0;
  edtDisc.Field.Value := 0;
  edtSubt.Field.Value := 0;
  cbPaid.State := cbUnchecked;
  cbCash.State := cbUnchecked;
  cbInstall.State := cbUnchecked;
  DTPInstall.Date := Now;
  richObs.Text := '';
end;

procedure TviewSales.btnSaveClick(Sender: TObject);
begin
  inherited;
  if ServiceRegister.QRYSale.State in dsEditModes then
  begin
    ServiceRegister.QRYSale.FieldByName('DATE_SALE').AsDateTime := DTPDateSale.DateTime;
    ServiceRegister.QRYSale.Post;
    ShowMessage('Registered successfully!');
    CardPanelList.ActiveCard := cardSearch;
  end;
end;

procedure TviewSales.cbCashClick(Sender: TObject);
begin
  inherited;
  if cbCash.Checked then
  begin
    edtChange.Enabled := TRUE;
    cbInstall.Enabled := FALSE;
    edtChange.Field.Value := 0;
  end
  else begin
    edtChange.Enabled := FALSE;
    cbInstall.Enabled := TRUE;
    edtChange.Field.Value := null;
  end;
end;

procedure TviewSales.cbInstallClick(Sender: TObject);
begin
  inherited;
  if cbInstall.Checked then
  begin
    DTPInstall.Enabled := TRUE;
    edtValInst.Enabled := TRUE;
    edtInstAmount.Enabled := TRUE;
    cbCash.Enabled := FALSE;
    edtValInst.Field.Value := 0;
    edtInstAmount.Field.Value := 0;
  end
  else begin
    DTPInstall.Enabled := FALSE;
    edtValInst.Enabled := FALSE;
    edtInstAmount.Enabled := FALSE;
    cbCash.Enabled := TRUE;
    edtValInst.Field.Value := null;
    edtInstAmount.Field.Value := null;
  end;
end;

procedure TviewSales.cbPaidClick(Sender: TObject);
begin
  inherited;
  if cbPaid.Checked then
  begin
    cbCash.Enabled := TRUE;
    cbInstall.Enabled := TRUE;
  end
  else begin
    cbCash.Enabled := FALSE;
    cbInstall.Enabled := FALSE;
  end;
end;

procedure TviewSales.edtCliIdChange(Sender: TObject);
begin
  inherited;
  if Trim(edtCliId.Text) = '' then
  begin
    lblClientName.Caption := 'Client Name';
    Exit;
  end;

  ServiceRegister.QRYNamePeople.Close;
  ServiceRegister.QRYNamePeople.SQL.Text := 'SELECT NAME FROM PEOPLE WHERE PEOPLE_ID = :ID AND CLIENT = TRUE';
  ServiceRegister.QRYNamePeople.ParamByName('ID').AsInteger := StrToIntDef(edtCliId.Text, 0);
  ServiceRegister.QRYNamePeople.Open;

  if not ServiceRegister.QRYNamePeople.IsEmpty then
    lblClientName.Caption := ServiceRegister.QRYNamePeople.FieldByName('NAME').AsString
  else
    lblClientName.Caption := 'Client not found';
end;

procedure TviewSales.edtEmpIdChange(Sender: TObject);
begin
  inherited;
  if Trim(edtEmpId.Text) = '' then
  begin
    lblEmployeeName.Caption := 'Employee Name';
    Exit;
  end;

  ServiceRegister.QRYNamePeople.Close;
  ServiceRegister.QRYNamePeople.SQL.Clear;
  ServiceRegister.QRYNamePeople.SQL.Add('SELECT NAME FROM PEOPLE WHERE PEOPLE_ID = :ID AND EMPLOYEE = TRUE')  ;
  ServiceRegister.QRYNamePeople.ParamByName('ID').AsInteger := StrToIntDef(edtEmpId.Text, 0);
  ServiceRegister.QRYNamePeople.Open;

  if not ServiceRegister.QRYNamePeople.IsEmpty then
    lblEmployeeName.Caption := ServiceRegister.QRYNamePeople.FieldByName('NAME').AsString
  else
    lblEmployeeName.Caption := 'Employee not found';
end;

procedure TviewSales.edtIdProdChange(Sender: TObject);
begin
  inherited;
  if Trim(edtIdProd.Text) = '' then
  begin
    lblNameProduct.Caption := 'Product Name';
    Exit;
  end;

  ServiceRegister.QRYNameProduct.Close;
  ServiceRegister.QRYNameProduct.SQL.Text := 'SELECT NAME FROM PRODUCT WHERE PROD_ID = :PROD_ID';
  ServiceRegister.QRYNameProduct.ParamByName('PROD_ID').AsInteger := StrToIntDef(edtIdProd.Text, 0);
  ServiceRegister.QRYNameProduct.Open;

  if not ServiceRegister.QRYNameProduct.IsEmpty then
    lblNameProduct.Caption := ServiceRegister.QRYNameProduct.FieldByName('NAME').AsString
  else
    lblNameProduct.Caption := 'Product not found';
end;

procedure TviewSales.edtSubtEnter(Sender: TObject);
begin
  inherited;
  edtSubt.Field.Value := ((edtTotal.Field.Value + edtAddit.Field.Value) - edtDisc.Field.Value);
end;

procedure TviewSales.edtTotalEnter(Sender: TObject);
begin
  inherited;
  edtTotal.Field.Value := (edtUnit.Field.Value * edtQtde.Field.Value);
end;

procedure TviewSales.FormShow(Sender: TObject);
begin
  inherited;
  Get_Sales;
  CardPanelList.ActiveCard := cardSearch;
  cbPaid.State := cbUnchecked;
  cbCash.State := cbUnchecked;
  cbInstall.State := cbUnchecked;
end;

procedure TviewSales.Get_Sales;
begin
  ServiceRegister.QRYSale.Close;
  ServiceRegister.QRYSale.SQL.Clear;
  ServiceRegister.QRYSale.SQL.Add('SELECT * FROM SALE WHERE 1=1');
  ServiceRegister.QRYSale.Open();
end;

end.
