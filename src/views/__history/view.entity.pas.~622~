unit view.entity;

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  Vcl.Controls,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Forms,
  Vcl.Dialogs,
  view.base.lists,
  Data.DB,
  System.ImageList,
  Vcl.ImgList,
  Vcl.Grids,
  Vcl.DBGrids,
  Vcl.StdCtrls,
  Vcl.WinXCtrls,
  Vcl.WinXPanels,
  Vcl.Buttons,
  Vcl.ExtCtrls,
  Service.Register,
  Vcl.Mask,
  Vcl.DBCtrls,
  Data.SqlExpr,
  Vcl.WinXPickers,
  Vcl.CheckLst,
  Vcl.ComCtrls, Service.Connection;

type
  TviewEntity = class(TviewBaseLists)
    lblPeopleID: TLabel;
    edtPeopleID: TDBEdit;
    lblName: TLabel;
    edtName: TDBEdit;
    lblBirth: TLabel;
    lblRegDate: TLabel;
    edtRegDate: TDBEdit;
    lblEIN: TLabel;
    lblPhone: TLabel;
    lblEmail: TLabel;
    edtEmail: TDBEdit;
    lblFantasy: TLabel;
    edtFantasy: TDBEdit;
    Label1: TLabel;
    DBEdit1: TDBEdit;
    Label2: TLabel;
    edtUpDate: TDBEdit;
    lblDateRegAsk: TLabel;
    lblNameAsk: TLabel;
    lblFantasyAsk: TLabel;
    edtFantasyAsk: TSearchBox;
    edtNameAsk: TSearchBox;
    edtZIPAsk: TSearchBox;
    lblZipAsk: TLabel;
    edtStateAsk: TSearchBox;
    lblStateAsk: TLabel;
    edtCityAsk: TSearchBox;
    lblCityAsk: TLabel;
    lblDateBirthAsk: TLabel;
    edtPhoneAsk: TSearchBox;
    lblPhoneAsk: TLabel;
    lblEmailAsk: TLabel;
    edtEmailAsk: TSearchBox;
    edtStreetAsk: TSearchBox;
    lblStreetAsk: TLabel;
    edtDateReg: TDateTimePicker;
    edtDateReg2: TDateTimePicker;
    dtBirthday: TDateTimePicker;
    btnConsult: TButton;
    edtEIN: TMaskEdit;
    rbPP: TRadioButton;
    rbLE: TRadioButton;
    edtPhone: TMaskEdit;
    lblTypePeople: TLabel;
    edtClient: TDBCheckBox;
    edtEmployee: TDBCheckBox;
    edtSupplier: TDBCheckBox;
    edtTransport: TDBCheckBox;
    lblTitleAddress: TLabel;
    lblZIPCode: TLabel;
    lblComplement: TLabel;
    lblState: TLabel;
    lblCity: TLabel;
    lblNeighborhood: TLabel;
    lblStreet: TLabel;
    lblNumberAddress: TLabel;
    edtZIPCode: TDBEdit;
    edtComplement: TDBEdit;
    edtState: TDBEdit;
    edtCity: TDBEdit;
    edtNeighborhood: TDBEdit;
    edtStreet: TDBEdit;
    edtNumberAddress: TDBEdit;
    procedure FormShow(Sender: TObject);
    procedure btnCloseWindowClick(Sender: TObject);
    procedure btnNewClick(Sender: TObject);
    procedure btnEditClick(Sender: TObject);
    procedure btnSaveClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure btnConsultClick(Sender: TObject);
    procedure LoadData;
    procedure DSDataDataChange(Sender: TObject; Field: TField);
    procedure edtEINEnter(Sender: TObject);
    procedure rbLEClick(Sender: TObject);
    procedure rbPPClick(Sender: TObject);
  private
  public
    procedure GET_Entity();
  end;

var
  viewEntity: TviewEntity;

implementation

{$R *.dfm}

{ TviewEntity }

procedure TviewEntity.btnCancelClick(Sender: TObject);
begin
  inherited;
  ServiceRegister.QRYEntity.Cancel;
  CardPanelList.ActiveCard := cardSearch;
end;

procedure TviewEntity.btnCloseWindowClick(Sender: TObject);
begin
  inherited;
  viewEntity.Close;
end;

procedure TviewEntity.btnConsultClick(Sender: TObject);
var

  DateRegistered1 : TDate;
  DateRegistered2 : TDate;

begin
  inherited;

  ServiceRegister.QRYEntity.SQL.Text := 'SELECT * FROM PEOPLE WHERE 1=1';

  DateRegistered1 := edtDateReg.Date;
  DateRegistered2 := edtDateReg2.Date;


  ServiceRegister.QRYEntity.SQL.Add(' AND DATE_REGISTER BETWEEN :DATEI AND :DATEF');
  ServiceRegister.QRYEntity.ParamByName('DATEI').AsDate  := DateRegistered1;
  ServiceRegister.QRYEntity.ParamByName('DATEF').AsDate  := DateRegistered2;

  if edtNameAsk.Text <> '' then
  begin
    ServiceRegister.QRYEntity.SQL.Add(' AND NAME LIKE :NAME');
    ServiceRegister.QRYEntity.ParamByName('NAME').AsString := '%' + edtNameAsk.Text + '%';
  end;

  if edtFantasyAsk.Text <> '' then
  begin
    ServiceRegister.QRYEntity.SQL.Add(' AND FANTASY LIKE :FANTASY');
    ServiceRegister.QRYEntity.ParamByName('FANTASY').AsString := '%' + edtFantasyAsk.Text + '%';
  end;

  if edtPhoneAsk.Text <> '' then
  begin
    ServiceRegister.QRYEntity.SQL.Add(' AND PHONE LIKE :PHONE');
    ServiceRegister.QRYEntity.ParamByName('PHONE').AsString := '%' + edtPhoneAsk.Text + '%';
  end;

  if edtEmailAsk.Text <> '' then
  begin
    ServiceRegister.QRYEntity.SQL.Add(' AND EMAIL LIKE :EMAIL');
    ServiceRegister.QRYEntity.ParamByName('EMAIL').AsString := '%' + edtEmailAsk.Text + '%';
  end;

  if edtZIPAsk.Text <> '' then
  begin
    ServiceRegister.QRYEntity.SQL.Add(' AND ZIPCODE LIKE :ZIPCODE');
    ServiceRegister.QRYEntity.ParamByName('ZIPCODE').AsString := '%' + edtZIPAsk.Text + '%';
  end;

  if edtStateAsk.Text <> '' then
  begin
    ServiceRegister.QRYEntity.SQL.Add(' AND STATE LIKE :STATE');
    ServiceRegister.QRYEntity.ParamByName('STATE').AsString := '%' + edtStateAsk.Text + '%';
  end;

  if edtCityAsk.Text <> '' then
  begin
    ServiceRegister.QRYEntity.SQL.Add(' AND CITY LIKE :CITY');
    ServiceRegister.QRYEntity.ParamByName('-').AsString := '%' + edtCityAsk.Text + '%';
  end;

  if edtStreetAsk.Text <> '' then
  begin
    ServiceRegister.QRYEntity.SQL.Add(' AND STREET LIKE :STREET');
    ServiceRegister.QRYEntity.ParamByName('STREET').AsString := '%' + edtStreetAsk.Text + '%';
  end;

  ServiceRegister.QRYEntity.Open;

end;

procedure TviewEntity.btnDeleteClick(Sender: TObject);
begin
  inherited;

  if ServiceRegister.QRYEntity.RecordCount > 0 then
  begin
    ServiceRegister.QRYEntity.Delete;
    ShowMessage('Record deleted successfully');
    CardPanelList.ActiveCard := cardSearch;
  end;

end;

procedure TviewEntity.btnEditClick(Sender: TObject);
var
  tipo : string;
begin
  inherited;
  CardPanelList.ActiveCard := cardRegister;
  edtName.SetFocus;
  if not ServiceRegister.QRYEntity.Active then
  ServiceRegister.QRYEntity.Open;
  ServiceRegister.QRYEntity.Edit;
  ServiceRegister.QRYEntity.Refresh;
  tipo := ServiceRegister.QRYEntity.FieldByName('TYPE_PERSON').AsString;
  rbPP.Checked := False;
  rbLE.Checked := False;
  if tipo = 'P' then
    rbPP.Checked := True
  else if tipo = 'L' then
    rbLE.Checked := True;
  edtEIN.EditMask := '';
  rbPP.Enabled := FALSE;
  rbLE.Enabled := FALSE;
  edtEIN.Text := ServiceRegister.QRYEntity.FieldByName('EIN_CNPJ').AsString;
  edtUpDate.Text := DateToStr(Date);
end;

procedure TviewEntity.btnNewClick(Sender: TObject);
var

  maxID: Integer;

begin

  inherited;
  CardPanelList.ActiveCard := cardRegister;
  edtName.SetFocus;
  ServiceRegister.QRYEntity.Insert;
  ServiceRegister.QRYIDPeople.Close;
  ServiceRegister.QRYIDPeople.SQL.Text := 'SELECT MAX(PEOPLE_ID) AS MaxID FROM PEOPLE';
  ServiceRegister.QRYIDPeople.Open;
  if not ServiceRegister.QRYIDPeople.FieldByName('MaxID').IsNull then
    maxID := ServiceRegister.QRYIDPeople.FieldByName('MaxID').AsInteger + 1
  else
    maxID := 1;
  edtPeopleID.Field.Value := maxID;
  edtRegDate.Text := DateToStr(Date);
  rbPP.Checked := true;
  edtClient.Checked := false;
  edtTransport.Checked := false;
  edtSupplier.Checked := false;
  edtEmployee.Checked := false;
  edtClient.State := cbUnchecked;
  edtTransport.State := cbUnchecked;
  edtEmployee.State := cbUnchecked;
  edtSupplier.State := cbUnchecked;
end;

procedure TviewEntity.btnSaveClick(Sender: TObject);
begin

  inherited;
  if ServiceRegister.QRYEntity.State in dsEditModes then
  begin

    ServiceRegister.QRYEntity.FieldByName('DATE_BIRTH').AsDateTime := dtBirthday.Date;
    ServiceRegister.QRYEntity.FieldByName('PHONE').Text := edtPhone.Text;
    if rbPP.Checked then
      ServiceRegister.QRYEntity.FieldByName('TYPE_PERSON').AsString := 'P'
    else if rbLE.Checked then
      ServiceRegister.QRYEntity.FieldByName('TYPE_PERSON').AsString := 'L';
    ServiceRegister.QRYEntity.FieldByName('EIN_CNPJ').AsString := edtEIN.Text;
    ServiceRegister.QRYEntity.FieldByName('COM_ID').AsInteger := ServiceConnection.SERVICE_COM_ID;
    ServiceRegister.QRYEntity.FieldByName('USER').AsString := ServiceConnection.SERVICE_USER;
    ServiceRegister.QRYEntity.Post;
    ShowMessage('Registered successfully!');
    CardPanelList.ActiveCard := cardSearch;

  end;

end;

procedure TviewEntity.LoadData;
begin
  edtPhone.Clear;
  edtEIN.Clear;
  if not ServiceRegister.QRYEntity.IsEmpty then
  begin
    edtPhone.Text := ServiceRegister.QRYEntity.FieldByName('PHONE').AsString;
    edtEIN.Text := ServiceRegister.QRYEntity.FieldByName('EIN_CNPJ').AsString;
  end;
end;

procedure TviewEntity.rbLEClick(Sender: TObject);
begin
  inherited;
  edtEIN.EditMask := '99.999.999/9999-99;1;_';
  edtEin.Text := '';
end;

procedure TviewEntity.rbPPClick(Sender: TObject);
begin
  inherited;
  edtEIN.EditMask := '999.999.999-99;1;_';
  edtEin.Text := '';
end;

procedure TviewEntity.DSDataDataChange(Sender: TObject; Field: TField);
begin
  inherited;
  LoadData;
end;

procedure TviewEntity.FormShow(Sender: TObject);
begin
  inherited;
  GET_Entity;
end;

procedure TviewEntity.GET_Entity();
begin

  ServiceRegister.QRYEntity.Close;
  ServiceRegister.QRYEntity.SQL.Clear;
  ServiceRegister.QRYEntity.SQL.Add('SELECT * FROM PEOPLE WHERE 1=1 ORDER BY 1');
  ServiceRegister.QRYEntity.Open();

end;

procedure TviewEntity.edtEINEnter(Sender: TObject);
begin
  inherited;
  if (rbPP.Checked = False) and (rbLE.Checked = False) then
  begin
    ShowMessage('Please, select a type of person!');
    edtEIN.EditMask := '999.999.999-99;1;_';
  end else if rbPP.Checked = True then
  begin
    edtEIN.EditMask := '999.999.999-99;1;_';
  end else if rbLE.Checked = True then
  begin
    edtEIN.EditMask := '99.999.999/9999-99;1;_';
  end;

end;

end.
