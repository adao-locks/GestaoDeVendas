unit view.product2;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, view.base.lists, Data.DB,
  System.ImageList, Vcl.ImgList, Vcl.Grids, Vcl.DBGrids, Vcl.WinXPanels,
  Vcl.Buttons, Vcl.StdCtrls, Vcl.ExtCtrls, Service.Register, Vcl.Mask,
  Vcl.DBCtrls, Vcl.WinXCtrls, Vcl.ComCtrls, Service.Connection, view.size,
  Vcl.ActnMan, Vcl.ActnColorMaps, Provider.Utils;

type
  TviewProducts = class(TviewBaseLists)
    cbActive: TDBCheckBox;
    edtBrand: TDBEdit;
    edtCategory: TDBEdit;
    edtDateReg: TDBEdit;
    edtDescription: TDBEdit;
    edtIdProd: TDBEdit;
    edtName: TDBEdit;
    edtSupplier: TDBEdit;
    edtUn: TDBEdit;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    dtRegIni: TDateTimePicker;
    edtBrandAsk: TSearchBox;
    edtCategoryAsk: TSearchBox;
    dtRegEnd: TDateTimePicker;
    edtNameAsk: TSearchBox;
    edtSupplierAsk: TSearchBox;
    edtUnAsk: TSearchBox;
    edtUserRegAsk: TSearchBox;
    edtUserUpAsk: TSearchBox;
    lblCityAsk: TLabel;
    lblDateBirthAsk: TLabel;
    lblDateRegAsk: TLabel;
    lblEmailAsk: TLabel;
    lblFantasyAsk: TLabel;
    lblNameAsk: TLabel;
    lblPhoneAsk: TLabel;
    lblStateAsk: TLabel;
    lblZipAsk: TLabel;
    btnConsult: TButton;
    Label9: TLabel;
    edtSizeRange: TDBEdit;
    edtSizes: TDBEdit;
    btnCreateEntity1: TButton;
    procedure btnCancelClick(Sender: TObject);
    procedure btnCloseWindowClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure btnEditClick(Sender: TObject);
    procedure btnNewClick(Sender: TObject);
    procedure btnSaveClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnConsultClick(Sender: TObject);
    procedure edtSizeRangeExit(Sender: TObject);
    procedure btnCreateEntity1Click(Sender: TObject);
  private
    { Private declarations }
  public
    procedure Get_Product();
  end;

var
  viewProducts: TviewProducts;

implementation

{$R *.dfm}
{ TviewBaseLists1 }

procedure TviewProducts.btnCancelClick(Sender: TObject);
begin
  inherited;

  if ServiceRegister.QRYProduct.State in dsEditModes then
  begin
    ServiceRegister.QRYProduct.Cancel;
    CardPanelList.ActiveCard := cardSearch;
  end;

end;

procedure TviewProducts.btnCloseWindowClick(Sender: TObject);
begin
  inherited;
  viewProducts.Close;
end;

procedure TviewProducts.btnConsultClick(Sender: TObject);
var

  DateRegistered1: TDate;
  DateRegistered2: TDate;

begin
  inherited;

  ServiceRegister.QRYProduct.SQL.Text := 'SELECT * FROM PRODUCT WHERE 1=1';

  DateRegistered1 := dtRegIni.Date;
  DateRegistered2 := dtRegEnd.Date;

  ServiceRegister.QRYProduct.SQL.Add
    (' AND DATE_REGISTER BETWEEN :DATEI AND :DATEF');
  ServiceRegister.QRYProduct.ParamByName('DATEI').AsDate := DateRegistered1;
  ServiceRegister.QRYProduct.ParamByName('DATEF').AsDate := DateRegistered2;

  if edtNameAsk.Text <> '' then
  begin
    ServiceRegister.QRYProduct.SQL.Add(' AND NAME LIKE :NAME');
    ServiceRegister.QRYProduct.ParamByName('NAME').AsString :=
      '%' + edtNameAsk.Text + '%';
  end;

  if edtCategoryAsk.Text <> '' then
  begin
    ServiceRegister.QRYProduct.SQL.Add(' AND CATEGORY LIKE :CATEGORY');
    ServiceRegister.QRYProduct.ParamByName('CATEGORY').AsString :=
      '%' + edtCategoryAsk.Text + '%';
  end;

  if edtBrandAsk.Text <> '' then
  begin
    ServiceRegister.QRYProduct.SQL.Add(' AND BRAND LIKE :BRAND');
    ServiceRegister.QRYProduct.ParamByName('BRAND').AsString :=
      '%' + edtBrandAsk.Text + '%';
  end;

  if edtSupplierAsk.Text <> '' then
  begin
    ServiceRegister.QRYProduct.SQL.Add(' AND SUPPLIER LIKE :SUPPLIER');
    ServiceRegister.QRYProduct.ParamByName('SUPPLIER').AsString :=
      '%' + edtSupplierAsk.Text + '%';
  end;

  if edtUnAsk.Text <> '' then
  begin
    ServiceRegister.QRYProduct.SQL.Add(' AND UN LIKE :UN');
    ServiceRegister.QRYProduct.ParamByName('UN').AsString :=
      '%' + edtUnAsk.Text + '%';
  end;

  if edtUserRegAsk.Text <> '' then
  begin
    ServiceRegister.QRYProduct.SQL.Add(' AND USER_ID LIKE :USER');
    ServiceRegister.QRYProduct.ParamByName('USER').AsString :=
      '%' + edtUserRegAsk.Text + '%';
  end;

  if edtUserUpAsk.Text <> '' then
  begin
    ServiceRegister.QRYProduct.SQL.Add(' AND USER_UPDATE LIKE :USER');
    ServiceRegister.QRYProduct.ParamByName('USER').AsString :=
      '%' + edtUserUpAsk.Text + '%';
  end;

  ServiceRegister.QRYProduct.Open;
  ResizeDBGridColumns(DBGData);
  AlighDBGridColumns(DBGData);

end;

procedure TviewProducts.btnCreateEntity1Click(Sender: TObject);
begin
  inherited;

  viewSize := TviewSize.Create(Self);

  viewSize.Left := (Screen.Width) div 4;
  viewSize.Top := (Screen.Height) div 4;

  viewSize.ShowModal;
end;

procedure TviewProducts.btnDeleteClick(Sender: TObject);
begin
  inherited;

  if ServiceRegister.QRYProduct.RecordCount > 0 then
  begin
    ServiceRegister.QRYProduct.Delete;
    ShowMessage('Record deleted successfully');
    CardPanelList.ActiveCard := cardSearch;
  end;

end;

procedure TviewProducts.btnEditClick(Sender: TObject);
begin
  inherited;

  CardPanelList.ActiveCard := cardRegister;
  edtName.SetFocus;
  ServiceRegister.QRYProduct.Edit;

end;

procedure TviewProducts.btnNewClick(Sender: TObject);
VAR

  maxID: integer;

begin
  inherited;

  CardPanelList.ActiveCard := cardRegister;
  edtName.SetFocus;
  ServiceRegister.QRYProduct.Insert;
  ServiceRegister.QRYIDProd.Close;
  ServiceRegister.QRYIDProd.SQL.Text :=
    'SELECT MAX(PROD_ID) AS MaxID FROM PRODUCT';
  ServiceRegister.QRYIDProd.Open;
  if not ServiceRegister.QRYIDProd.FieldByName('MaxID').IsNull then
    maxID := ServiceRegister.QRYIDProd.FieldByName('MaxID').AsInteger + 1
  else
    maxID := 1;
  edtIdProd.Field.Value := maxID;
  edtDateReg.Text := DateToStr(Date);
  cbActive.State := cbChecked;

end;

procedure TviewProducts.btnSaveClick(Sender: TObject);
begin
  inherited;

  if ServiceRegister.QRYProduct.State in dsEditModes then
  begin
    ServiceRegister.QRYProduct.FieldByName('COM_ID').AsInteger :=
      ServiceConnection.SERVICE_COM_ID;
    ServiceRegister.QRYProduct.FieldByName('USER').AsString :=
      ServiceConnection.SERVICE_USER;
    ServiceRegister.QRYProduct.Post;
    ShowMessage('Registered successfully!');
    CardPanelList.ActiveCard := cardSearch;

  end;

end;

procedure TviewProducts.edtSizeRangeExit(Sender: TObject);
begin
  inherited;
  if Trim(edtSizeRange.Text) <> '' then
  begin
    try
      ServiceRegister.QRYRangeConsult.ParamByName('ID').AsInteger := StrToInt(edtSizeRange.Text);
      ServiceRegister.QRYRangeConsult.Open;
      if not ServiceRegister.QRYRangeConsult.IsEmpty then
      begin
        edtSizes.Text := ServiceRegister.QRYRangeConsult.FieldByName('NAME').AsString;
      end
      else
      begin
        edtSizes.Clear;
        ShowMessage('ID'#39's size range not found, please, enter a valid ID or register a new.');
        edtSizeRange.SetFocus;
      end;

    finally
      ServiceRegister.QRYRangeConsult.Close;
    end;
  end
  else
  begin
    edtSizeRange.Clear;
  end;
end;

procedure TviewProducts.FormCreate(Sender: TObject);
begin
  inherited;

  CardPanelList.ActiveCard := cardSearch;

end;

procedure TviewProducts.FormShow(Sender: TObject);
begin
  inherited;

  Get_Product;
  ResizeDBGridColumns(DBGData);
  AlighDBGridColumns(DBGData);

end;

procedure TviewProducts.Get_Product;
begin

  ServiceRegister.QRYProduct.Close;
  ServiceRegister.QRYProduct.SQL.Clear;
  ServiceRegister.QRYProduct.SQL.Add('SELECT * FROM PRODUCT WHERE 1=1');
  ServiceRegister.QRYProduct.Open();

end;

end.
