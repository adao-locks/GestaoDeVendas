unit view.color;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, view.base.lists, Data.DB,
  System.ImageList, Vcl.ImgList, Vcl.Grids, Vcl.DBGrids, Vcl.WinXPanels,
  Vcl.Buttons, Vcl.StdCtrls, Vcl.ExtCtrls, Service.Connection, Service.Register,
  Vcl.DBCtrls, Vcl.Mask, Provider.Constants;

type
  TviewColor = class(TviewBaseLists)
    Label1: TLabel;
    edtID: TDBEdit;
    Label2: TLabel;
    edtName: TDBEdit;
    CBActive: TDBCheckBox;
    Label3: TLabel;
    EDTDTCreated: TDBEdit;
    Label4: TLabel;
    Label5: TLabel;
    lblRGB: TLabel;
    lblHEX: TLabel;
    edtRGB1: TEdit;
    edtRGB2: TEdit;
    edtRGB3: TEdit;
    edtHEX: TEdit;
    procedure btnNewClick(Sender: TObject);
    procedure btnSaveClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnEditClick(Sender: TObject);
    procedure btnCancelClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure edtRGB1Change(Sender: TObject);
    procedure edtRGB2Change(Sender: TObject);
    procedure edtRGB3Change(Sender: TObject);
    procedure edtHEXChange(Sender: TObject);
    procedure edtRGB1KeyPress(Sender: TObject; var Key: Char);
    procedure edtRGB2KeyPress(Sender: TObject; var Key: Char);
    procedure edtRGB3KeyPress(Sender: TObject; var Key: Char);
    procedure edtRGB1Exit(Sender: TObject);
    procedure edtRGB2Exit(Sender: TObject);
    procedure edtRGB3Exit(Sender: TObject);
    procedure edtCMYK1Exit(Sender: TObject);
    procedure btnCloseWindowClick(Sender: TObject);
  private
    { Private declarations }
  public
    procedure RGBUpdate();
    procedure HEXUpdate();
    procedure CMYKUpdate();
    procedure HSLUpdate();
    procedure ValidarLimite(Edit: TEdit; MinValue, MaxValue: Integer);
    procedure ValidarBinario(Edit: TEdit; MinValue, MaxValue: Integer);
    procedure RGBValueToEdit();
    procedure HEXValueToEdit();
    procedure CMYKValueToEdit();
    procedure HSLValueToEdit();
  end;

var
  viewColor: TviewColor;

implementation

{$R *.dfm}

procedure TviewColor.RGBValueToEdit;
var
  Texto: string;
  Valores: TArray<string>;
begin
  Texto := lblRGB.Caption;
  Texto := Texto.Replace('(', '').Replace(')', '').Replace(' ', '');

  Valores := Texto.Split([',']);

  edtRGB1.Text := Valores[0];
  edtRGB2.Text := Valores[1];
  edtRGB3.Text := Valores[2];

end;

procedure TviewColor.CMYKValueToEdit;
var
  Texto: string;
  Valores: TArray<string>;
begin
  Texto := lblCMYK.Caption;
  Texto := Texto.Replace('(', '').Replace(')', '').Replace(' ', '').Replace('%', '');

  Valores := Texto.Split([',']);

  edtCMYK1.Text := Valores[0];
  edtCMYK2.Text := Valores[1];
  edtCMYK3.Text := Valores[2];
  edtCMYK4.Text := Valores[3];

end;

procedure TviewColor.HSLValueToEdit;
var
  Texto: string;
  Valores: TArray<string>;
begin
  Texto := lblHSL.Caption;
  Texto := Texto.Replace('(', '').Replace(')', '').Replace(' ', '').Replace('%', '').Replace('°', '').Replace('/', ',');

  Valores := Texto.Split([',']);

  edtHSL1.Text := Valores[0];
  edtHSL2.Text := Valores[1];
  edtHSL3.Text := Valores[2];
  edtHSL4.Text := Valores[3];

end;

procedure TviewColor.HEXValueToEdit;
var
  Hex: string;
begin
  Hex := lblHEX.Caption;
  Hex := Hex.Replace('#', '');

  edtHEX.Text := Hex;
end;

procedure TviewColor.ValidarBinario(Edit: TEdit; MinValue, MaxValue: Integer);
var
  Value: Double;
  FS: TFormatSettings;
begin
  FS := TFormatSettings.Create;
  FS.DecimalSeparator := ',';

  if TryStrToFloat(Edit.Text, Value, FS) then
  begin
    if Value < MinValue then
      Edit.Text := FloatToStr(MinValue, FS)
    else if Value > MaxValue then
      Edit.Text := FloatToStr(MaxValue, FS);
  end
  else
    Edit.Text := FloatToStr(MinValue, FS);
end;

procedure TviewColor.ValidarLimite(Edit: TEdit; MinValue, MaxValue: Integer);
var
  Value: Integer;
begin
  if TryStrToInt(Edit.Text, Value) then
  begin
    if Value < MinValue then
      Edit.Text := IntToStr(MinValue)
    else if Value > MaxValue then
      Edit.Text := IntToStr(MaxValue);
  end
  else
    Edit.Text := IntToStr(MinValue);
end;

procedure TviewColor.btnCancelClick(Sender: TObject);
begin
  inherited;

  if ServiceRegister.QRYColor.State in dsEditModes then
  begin
    ServiceRegister.QRYColor.Cancel;
    CardPanelList.ActiveCard := cardSearch;
  end;

end;

procedure TviewColor.btnCloseWindowClick(Sender: TObject);
begin
  inherited;
  viewColor.Close;
end;

procedure TviewColor.btnDeleteClick(Sender: TObject);
begin
  inherited;

  if ServiceRegister.QRYColor.RecordCount > 0 then
  begin
    ServiceRegister.QRYColor.Delete;
    ShowMessage('Record deleted successfully');
    CardPanelList.ActiveCard := cardSearch;
  end;

end;

procedure TviewColor.btnEditClick(Sender: TObject);
begin
  inherited;

  CardPanelList.ActiveCard := cardRegister;
  edtName.SetFocus;
  ServiceRegister.QRYColor.Edit;
  lblRGB.Caption := ServiceRegister.QRYColor.FieldByName('RGB').AsString;
  lblHEX.Caption := ServiceRegister.QRYColor.FieldByName('HEX').AsString;
  lblCMYK.Caption := ServiceRegister.QRYColor.FieldByName('CMYK').AsString;
  lblHSL.Caption := ServiceRegister.QRYColor.FieldByName('HSL').AsString;
  RGBValueToEdit();
  HEXValueToEdit();
  CMYKValueToEdit();
  HSLValueToEdit();

end;

procedure TviewColor.btnNewClick(Sender: TObject);
var
  maxID: integer;
begin
  inherited;

  CardPanelList.ActiveCard := cardRegister;
  edtName.SetFocus;
  ServiceRegister.QRYColor.Insert;
  ServiceRegister.QRYIDColor.Open;
  if not ServiceRegister.QRYIDColor.FieldByName('maxID').IsNull then
    maxID := ServiceRegister.QRYIDColor.FieldByName('maxID').AsInteger + 1
  else
    maxID := 1;
  edtID.Field.Value := maxID;
  EDTDTCreated.Text := DateToStr(Date);
  CBActive.State := cbChecked;
  edtRGB1.Text := '';
  edtRGB2.Text := '';
  edtRGB3.Text := '';
  edtHEX.Text := '';

end;

procedure TviewColor.btnSaveClick(Sender: TObject);
begin
  inherited;

  if ServiceRegister.QRYColor.State in dsEditModes then
  begin
    ServiceRegister.QRYColor.FieldByName('COM_ID').AsInteger := ServiceConnection.SERVICE_COM_ID;
    ServiceRegister.QRYColor.FieldByName('USER').AsString := ServiceConnection.SERVICE_USER;
    ServiceRegister.QRYColor.FieldByName('RGB').AsString := lblRGB.Caption;
    ServiceRegister.QRYColor.FieldByName('HEX').AsString := lblHEX.Caption;
    ServiceRegister.QRYColor.Post;
    ShowMessage('Registered successfully!');

    CardPanelList.ActiveCard := cardSearch;
  end;
end;

procedure TviewColor.edtHEXChange(Sender: TObject);
begin
  inherited;
  HEXUpdate();
end;

procedure TviewColor.edtRGB1Change(Sender: TObject);
begin
  inherited;
  RGBUpdate();
end;

procedure TviewColor.edtRGB1Exit(Sender: TObject);
begin
  inherited;
  ValidarLimite(edtRGB1, 0, 255);
end;

procedure TviewColor.edtRGB1KeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if not (Key in ['0'..'9', #8]) then
    Key := #0;
end;

procedure TviewColor.edtRGB2Change(Sender: TObject);
begin
  inherited;
  RGBUpdate();
end;

procedure TviewColor.edtRGB2Exit(Sender: TObject);
begin
  inherited;
  ValidarLimite(edtRGB2, 0, 255);
end;

procedure TviewColor.edtRGB2KeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if not (Key in ['0'..'9', #8]) then
    Key := #0;
end;

procedure TviewColor.edtRGB3Change(Sender: TObject);
begin
  inherited;
  RGBUpdate();
end;

procedure TviewColor.edtRGB3Exit(Sender: TObject);
begin
  inherited;
  ValidarLimite(edtRGB3, 0, 255);
end;

procedure TviewColor.edtRGB3KeyPress(Sender: TObject; var Key: Char);
begin
  inherited;
  if not (Key in ['0'..'9', #8]) then
    Key := #0;
end;

procedure TviewColor.FormShow(Sender: TObject);
begin
  inherited;

  CardPanelList.ActiveCard := cardSearch;
  cardRegister.Enabled := True;
  ServiceRegister.QRYColor.Open;

end;

procedure TviewColor.HEXUpdate;
begin
  lblHEX.Caption := ( '#' + edtHEX.Text );
end;

procedure TviewColor.RGBUpdate;
begin

  lblRGB.Caption := ('(' + edtRGB1.Text + ', ' + edtRGB2.Text + ', ' + edtRGB3.Text + ')');

end;

end.
