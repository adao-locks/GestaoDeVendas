unit Service.Connection;

interface

uses
  System.SysUtils,
  System.Classes,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.VCLUI.Wait,
  Data.DB,
  FireDAC.Comp.Client,
  FireDAC.Comp.UI,
  FireDAC.Phys.FBDef,
  FireDAC.Phys.IBBase,
  FireDAC.Phys.FB,
  System.IniFiles,
  FireDAC.Stan.Param,
  FireDAC.DatS,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  FireDAC.Comp.DataSet,
  Provider.Constants;

type
  TServiceConnection = class(TDataModule)
    FDConn: TFDConnection;
    WaitCursor: TFDGUIxWaitCursor;
    FBDriverLink: TFDPhysFBDriverLink;
    QRYEnterprise: TFDQuery;
    QRYUsers: TFDQuery;
    QRYUsersID: TIntegerField;
    QRYUsersNAME: TStringField;
    QRYUsersMASTER: TStringField;
    QRYUsersPASSWORD: TBlobField;
    QRYUsersSTATUS: TBooleanField;
    QRYUsersFUNCTION: TStringField;
    QRYEnterpriseID_COM: TStringField;
    QRYEnterpriseACTIVE: TBooleanField;
    QRYEnterpriseHEADQUARTERS: TBooleanField;
    QRYEnterpriseCOMPANY_NAME: TStringField;
    QRYEnterpriseFANTASY: TStringField;
    QRYEnterpriseEIN_CNPJ: TStringField;
    QRYEnterprisePHONE: TStringField;
    QRYEnterpriseEMAIL: TStringField;
    QRYEnterpriseDATE_REGISTER: TDateField;
    QRYEnterpriseSTREET: TStringField;
    QRYEnterpriseCITY: TStringField;
    QRYEnterpriseSTATE: TStringField;
    QRYEnterpriseZIP: TStringField;
    QRYEnterpriseADDRESS_NUMBER: TStringField;
    QRYEnterpriseSITE: TStringField;
    QRYEnterpriseID_USER: TIntegerField;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    var
      SERVICE_COM_ID : STRING;
      SERVICE_USER : STRING;
  end;

var
  ServiceConnection: TServiceConnection;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

procedure TServiceConnection.DataModuleCreate(Sender: TObject);
var
  LIniFile    :TIniFile;
  LDatabase   :string;
  LUser_Name  :string;
  LPassword   :string;
  LServidor   :string;
  LPort       :integer;
  LPath       :string;

begin

  try

    FDConn.Connected := false;

    LPath := ExtractFileDir(ParamStr(0)) + '\login.ini';

    LIniFile := TIniFile.Create(LPath);

    LDatabase   := LIniFile.ReadString('connection','Path', LDatabase);
    LServidor   := LIniFile.ReadString('connection','Host', LServidor);
    LPort       := LIniFile.ReadInteger('connection','Port', LPort);

    LUser_Name  := 'SYSDBA';
    LPassword   := 'masterkey';

    FDConn.Params.Values['Database']        := LDatabase;
    FDConn.Params.Values['User_Name']       := LUser_Name;
    FDConn.Params.Values['Password']        := LPassword;
    FDConn.Params.Values['Server']          := LServidor;
    FDConn.Params.Values['Port']            := LPort.ToString;

  finally

    FreeAndNil(LIniFile);

  end;

  QRYEnterprise.Close;
  QRYEnterprise.Params[0].AsInteger := 1;
  QRYEnterprise.Open();

  QRYUsers.Close;
  QRYUsers.Params[0].AsString := '_001';
  QRYUsers.Open();

  iCOD_COMPANY    := QRYEnterpriseID_COM.AsString;
  SERVICE_COM_ID  := iCOD_COMPANY;
  sCOMPANY_NAME   := QRYEnterpriseCOMPANY_NAME.AsString;
  sUSER           := QRYUsersID.AsInteger;
  SERVICE_USER    := sUSER.ToString;

end;

end.
