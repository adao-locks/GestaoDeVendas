-- COLOR definition

-- Drop table

-- DROP TABLE COLOR;

CREATE TABLE COLOR (
	ID INTEGER NOT NULL,
	NAME VARCHAR(100) NOT NULL,
	ACTIVE BOOLEAN,
	COM_ID VARCHAR(10),
	"USER" VARCHAR(100),
	RGB VARCHAR(100),
	HEX VARCHAR(100),
	DT_CREATED TIMESTAMP,
	CONSTRAINT COLOR_PK PRIMARY KEY (ID)
);


-- COMPANY definition

-- Drop table

-- DROP TABLE COMPANY;

CREATE TABLE COMPANY (
	ID_COM INTEGER NOT NULL,
	ACTIVE BOOLEAN,
	HEADQUARTERS BOOLEAN,
	COMPANY_NAME VARCHAR(255) NOT NULL,
	FANTASY VARCHAR(255) NOT NULL,
	EIN_CNPJ VARCHAR(20) NOT NULL,
	PHONE VARCHAR(15),
	EMAIL VARCHAR(100),
	DATE_REGISTER DATE,
	STREET VARCHAR(100),
	CITY VARCHAR(60),
	STATE VARCHAR(60),
	ZIP VARCHAR(9),
	ADDRESS_NUMBER VARCHAR(10),
	SITE VARCHAR(255),
	ID_USER INTEGER,
	CONSTRAINT PK_COMPANY PRIMARY KEY (ID_COM)
);


-- LOGS definition

-- Drop table

-- DROP TABLE LOGS;

CREATE TABLE LOGS (
	LANCTO INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	"USER" VARCHAR(100),
	"DATE" TIMESTAMP,
	DESCRIPTION VARCHAR(255),
	PAGE VARCHAR(100),
	COMPANY INTEGER,
	"ACTION" VARCHAR(100),
	"KEY" VARCHAR(100) NOT NULL,
	CONSTRAINT LOGS_PK PRIMARY KEY (LANCTO)
);


-- PEOPLE definition

-- Drop table

-- DROP TABLE PEOPLE;

CREATE TABLE PEOPLE (
	PEOPLE_ID INTEGER NOT NULL,
	NAME VARCHAR(150) NOT NULL,
	EIN_CNPJ VARCHAR(20),
	PHONE VARCHAR(15),
	EMAIL VARCHAR(100),
	DATE_BIRTH DATE,
	DATE_REGISTER DATE,
	STREET VARCHAR(150),
	NUMBER_ADDRESS VARCHAR(10),
	COMPLEMENT VARCHAR(255),
	NEIGHBORHOOD VARCHAR(100),
	CITY VARCHAR(100),
	STATE VARCHAR(2),
	ZIP_CODE VARCHAR(10),
	FANTASY VARCHAR(150),
	OBS VARCHAR(255),
	DATE_UPDATED TIMESTAMP,
	COM_ID VARCHAR(4),
	"USER" VARCHAR(100),
	TYPE_PERSON CHAR(1),
	CLIENT BOOLEAN,
	EMPLOYEE BOOLEAN,
	SUPPLIER BOOLEAN,
	TRANSPORT BOOLEAN,
	CONSTRAINT PK_PEOPLE PRIMARY KEY (PEOPLE_ID)
);


-- PRODUCT definition

-- Drop table

-- DROP TABLE PRODUCT;

CREATE TABLE PRODUCT (
	PROD_ID INTEGER NOT NULL,
	NAME VARCHAR(150) NOT NULL,
	DESCRIPTION VARCHAR(255),
	SIZE_RANGE INTEGER,
	CATEGORY VARCHAR(50),
	SUPPLIER VARCHAR(100),
	ACTIVE BOOLEAN,
	DATE_REGISTER TIMESTAMP,
	BRAND VARCHAR(60),
	UN VARCHAR(10),
	DATE_UPDATED TIMESTAMP,
	"USER" VARCHAR(100),
	COM_ID VARCHAR(4),
	CONSTRAINT PK_PRODUCT PRIMARY KEY (PROD_ID)
);


-- SALE definition

-- Drop table

-- DROP TABLE SALE;

CREATE TABLE SALE (
	ID_SALE INTEGER NOT NULL,
	ID_CLIENT INTEGER NOT NULL,
	ID_EMPLOYEE INTEGER NOT NULL,
	DT_SALE TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	PAYMENT_METHOD VARCHAR(30) DEFAULT 'DINHEIRO' NOT NULL,
	DISCOUNT NUMERIC(10,2) DEFAULT 0 NOT NULL,
	TOTAL_AMOUNT NUMERIC(15,2) DEFAULT 0 NOT NULL,
	STATUS VARCHAR(20) DEFAULT 'PENDENTE' NOT NULL,
	OBSERVATION VARCHAR(500) DEFAULT NULL,
	DT_CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	ID_COM VARCHAR(11) NOT NULL,
	"USER" INTEGER NOT NULL,
	CONSTRAINT SALE_PK PRIMARY KEY (ID_SALE)
);


-- SALE_ITEMS definition

-- Drop table

-- DROP TABLE SALE_ITEMS;

CREATE TABLE SALE_ITEMS (
	ID INTEGER NOT NULL,
	ID_ITEM INTEGER NOT NULL,
	ID_SALE INTEGER NOT NULL,
	ID_PRODUCT VARCHAR(50) NOT NULL,
	QUANTITY NUMERIC(10,2) DEFAULT 0 NOT NULL,
	UNIT_PRICE NUMERIC(15,2) DEFAULT 0 NOT NULL,
	DISCOUNT NUMERIC(10,2) DEFAULT 0,
	DT_CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CONSTRAINT SALE_ITEMS_PK PRIMARY KEY (ID)
);


-- "SIZE" definition

-- Drop table

-- DROP TABLE "SIZE";

CREATE TABLE "SIZE" (
	ID INTEGER NOT NULL,
	"SIZE" VARCHAR(10),
	WEIGHT DOUBLE PRECISION DEFAULT 0,
	"LENGTH" DOUBLE PRECISION DEFAULT 0,
	HEIGHT DOUBLE PRECISION DEFAULT 0,
	"USER" VARCHAR(100),
	COM_ID VARCHAR(4),
	CONSTRAINT INTEG_156 PRIMARY KEY (ID)
);


-- SIZE_RANGE definition

-- Drop table

-- DROP TABLE SIZE_RANGE;

CREATE TABLE SIZE_RANGE (
	ID INTEGER NOT NULL,
	NAME VARCHAR(50) NOT NULL,
	SIZE1 VARCHAR(10) NOT NULL,
	SIZE2 VARCHAR(10),
	SIZE3 VARCHAR(10),
	SIZE4 VARCHAR(10),
	SIZE5 VARCHAR(10),
	SIZE6 VARCHAR(10),
	SIZE7 VARCHAR(10),
	SIZE8 VARCHAR(10),
	SIZE9 VARCHAR(10),
	SIZE10 VARCHAR(10),
	SIZE11 VARCHAR(10),
	SIZE12 VARCHAR(10),
	SIZE13 VARCHAR(10),
	SIZE14 VARCHAR(10),
	SIZE15 VARCHAR(10),
	SIZE16 VARCHAR(10),
	SIZE17 VARCHAR(10),
	SIZE18 VARCHAR(10),
	SIZE19 VARCHAR(10),
	SIZE20 VARCHAR(10),
	"USER" VARCHAR(100),
	COM_ID VARCHAR(4),
	CONSTRAINT PK_SIZE_RANGE PRIMARY KEY (ID)
);


-- STOCK definition

-- Drop table

-- DROP TABLE STOCK;

CREATE TABLE STOCK (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	PRODUCT INTEGER NOT NULL,
	COLOR INTEGER NOT NULL,
	"SIZE" INTEGER NOT NULL,
	PRICE NUMERIC(12,2),
	QUANTITY INTEGER NOT NULL,
	UN VARCHAR(10),
	"LOCAL" VARCHAR(100),
	BATCH VARCHAR(100) DEFAULT '000000' NOT NULL,
	COST NUMERIC(10,2),
	CONSTRAINT STOCK_PK PRIMARY KEY (ID)
);
CREATE INDEX STOCK_PRODUCT_IDX ON STOCK (PRODUCT,COLOR,"SIZE","LOCAL",BATCH);


-- USERS definition

-- Drop table

-- DROP TABLE USERS;

CREATE TABLE USERS (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	NAME VARCHAR(100),
	MASTER CHAR(1) DEFAULT 'N' NOT NULL,
	PASSWORD BLOB SUB_TYPE BINARY NOT NULL,
	STATUS BOOLEAN,
	"FUNCTION" VARCHAR(100),
	CONSTRAINT USERS_PK PRIMARY KEY (ID)
);


-- MOV_STOCK definition

-- Drop table

-- DROP TABLE MOV_STOCK;

CREATE TABLE MOV_STOCK (
	ID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	ID_STOCK INTEGER NOT NULL,
	PRODUCT INTEGER NOT NULL,
	COLOR INTEGER NOT NULL,
	"SIZE" INTEGER NOT NULL,
	QUANTITY INTEGER NOT NULL,
	UN VARCHAR(100),
	"LOCAL" VARCHAR(100),
	BATCH VARCHAR(100) DEFAULT '000000' NOT NULL,
	OPERATION CHAR(1) NOT NULL,
	DT_MOV TIMESTAMP,
	"USER" INTEGER,
	COM_ID VARCHAR(10),
	CONSTRAINT MOV_STOCK_PK PRIMARY KEY (ID),
	CONSTRAINT MOV_STOCK_STOCK_FK FOREIGN KEY (ID) REFERENCES STOCK(ID) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE UNIQUE INDEX MOV_STOCK_ID_IDX ON MOV_STOCK (ID);
CREATE INDEX MOV_STOCK_STOCK_FK ON MOV_STOCK (ID);

CREATE TRIGGER TRG_SALE_DELETE_LOG FOR SALE AFTER DELETE
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, OLD."USER", CURRENT_TIMESTAMP, 
            'DELETED THE SALE NUMBER: ' || OLD.ID_SALE, 
            'SALE', OLD.ID_COM, 'DELETE', OLD.ID_SALE);
END;

CREATE TRIGGER TRG_SALE_INSERT_LOG FOR SALE AFTER INSERT
AS
DECLARE MAX_LANCTO INT;
BEGIN
    -- Buscar o maior valor de LANCTO antes de inserir
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;

    -- Inserir o log com o próximo valor correto para LANCTO
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, NEW."USER", CURRENT_TIMESTAMP, 
            'REGISTERING NEW SALE NUMBER: ' || NEW.ID_SALE, 
            'SALE', NEW.ID_COM, 'INSERT', NEW.ID_SALE);
END;

CREATE TRIGGER TRG_SALE_UPDATE_LOG FOR SALE AFTER UPDATE
AS
DECLARE MAX_LANCTO INT;
BEGIN
    -- Buscar o maior valor de LANCTO antes de inserir
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;

    -- Inserir o log com o próximo valor correto para LANCTO
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, NEW."USER", CURRENT_TIMESTAMP, 
            'UPDATING THE SALE NUMBER: ' || NEW.ID_SALE, 
            'SALE', NEW.ID_COM, 'UPDATE', NEW.ID_SALE);
END;

CREATE TRIGGER TRG_COMPANY_UPDATE_LOG FOR COMPANY AFTER UPDATE
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, NEW."ID_USER", CURRENT_TIMESTAMP, 
            'UPDATING THE COMPANY REGISTRATION: ' || NEW.ID_COM, 
            'COMPANY', NEW.ID_COM, 'UPDATE', NEW.ID_COM);
END;

CREATE TRIGGER TRG_PEOPLE_DELETE_LOG FOR PEOPLE AFTER DELETE
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, OLD."USER", CURRENT_TIMESTAMP, 
            'DELETED THE PEOPLE ID: ' || OLD.PEOPLE_ID, 'ENTITY', OLD.COM_ID, 'DELETE', OLD.PEOPLE_ID);
END;

CREATE TRIGGER TRG_PEOPLE_INSERT_LOG FOR PEOPLE AFTER INSERT
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, NEW."USER", CURRENT_TIMESTAMP, 
            'REGISTERING THE NEW PEOPLE ID: ' || NEW.PEOPLE_ID, 'ENTITY', NEW.COM_ID, 'INSERT', NEW.PEOPLE_ID);
END;

CREATE TRIGGER TRG_PEOPLE_UPDATE_LOG FOR PEOPLE AFTER UPDATE
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, NEW."USER", CURRENT_TIMESTAMP, 
            'UPDATING THE PEOPLE ID: ' || NEW.PEOPLE_ID, 'ENTITY', NEW.COM_ID, 'UPDATE', NEW.PEOPLE_ID);
END;

CREATE TRIGGER TRG_SIZE_DELETE_LOG FOR "SIZE" AFTER DELETE
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, OLD."USER", CURRENT_TIMESTAMP, 
            'DELETED THE SIZE ID: ' || OLD.ID, 'SIZES', OLD.COM_ID, 'DELETE', OLD.ID);
END;

CREATE TRIGGER TRG_SIZE_INSERT_LOG FOR "SIZE" AFTER INSERT
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, NEW."USER", CURRENT_TIMESTAMP, 
            'REGISTERING THE NEW SIZE ID: ' || NEW.ID, 'SIZES', NEW.COM_ID, 'INSERT', NEW.ID);
END;

CREATE TRIGGER TRG_SIZE_UPDATE_LOG FOR "SIZE" AFTER UPDATE
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, NEW."USER", CURRENT_TIMESTAMP, 
            'UPDATING THE SIZE: ' || OLD."SIZE"||' TO: '||NEW."SIZE", 'SIZES', NEW.COM_ID, 'UPDATE', NEW.ID);
END;

CREATE TRIGGER TRG_SIZE_RANGE_DELETE_LOG FOR SIZE_RANGE AFTER DELETE
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, OLD."USER", CURRENT_TIMESTAMP, 
            'DELETED THE SIZE RANGE ID: ' || OLD.ID, 'SIZES', OLD.COM_ID, 'DELETE', OLD.ID);
END;

CREATE TRIGGER TRG_SIZE_RANGE_INSERT_LOG FOR SIZE_RANGE AFTER INSERT
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, NEW."USER", CURRENT_TIMESTAMP, 
            'REGISTERING THE NEW SIZE RANGE ID: ' || NEW.ID, 'SIZES', NEW.COM_ID, 'INSERT', NEW.ID);
END;

CREATE TRIGGER TRG_SIZE_RANGE_UPDATE_LOG FOR SIZE_RANGE AFTER UPDATE
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, NEW."USER", CURRENT_TIMESTAMP, 
            'UPDATING THE SIZE RANGE: ' || OLD.NAME||' TO: '||NEW.NAME, 'SIZES', NEW.COM_ID, 'UPDATE', NEW.ID);
END;

CREATE TRIGGER TRG_COLOR_DELETE_LOG FOR COLOR AFTER DELETE
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, OLD."USER", CURRENT_TIMESTAMP, 
            'DELETED THE COLOR ID: ' || OLD.ID, 'COLOR', OLD.COM_ID, 'DELETE', OLD.ID);
END;

CREATE TRIGGER TRG_COLOR_INSERT_LOG FOR COLOR AFTER INSERT
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, NEW."USER", CURRENT_TIMESTAMP, 
            'REGISTERING THE NEW COLOR ID: ' || NEW.ID, 'COLOR', NEW.COM_ID, 'INSERT', NEW.ID);
END;

CREATE TRIGGER TRG_COLOR_UPDATE_LOG FOR COLOR AFTER UPDATE
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, NEW."USER", CURRENT_TIMESTAMP, 
            'UPDATING THE SIZE: ' || OLD.NAME||' TO: '||NEW.NAME, 'COLOR', NEW.COM_ID, 'UPDATE', NEW.ID);
END;

CREATE TRIGGER TRG_MOV_STOCK_LOG FOR MOV_STOCK AFTER INSERT
AS
DECLARE VARIABLE MAX_LANCTO INT;
BEGIN
  IF (NEW.OPERATION = 'S') THEN
  BEGIN
      SELECT COALESCE(MAX(LANCTO), 0) + 1 
      FROM LOGS 
      INTO :MAX_LANCTO;
      INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
      VALUES (:MAX_LANCTO, NEW."USER", CURRENT_TIMESTAMP, 
              'SAIDA DO ESTOQUE PARA PRODUTO: ' || NEW.PRODUCT || ' COR: ' || NEW.COLOR || ' TAMANHO: ' || NEW."SIZE", 
              'MOVIMENTACAO', NEW.COM_ID, 'SAIDA', NEW.ID);
  END
  IF (NEW.OPERATION = 'E') THEN
  BEGIN      
	  SELECT COALESCE(MAX(LANCTO), 0) + 1 
      FROM LOGS 
      INTO :MAX_LANCTO;
      INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
      VALUES (:MAX_LANCTO, NEW."USER", CURRENT_TIMESTAMP, 
              'ENTRADA DO ESTOQUE PARA PRODUTO: ' || NEW.PRODUCT || ' COR: ' || NEW.COLOR || ' TAMANHO: ' || NEW."SIZE", 
              'MOVIMENTACAO', NEW.COM_ID, 'ENTRADA', NEW.ID);
  END  
END;

CREATE TRIGGER TRG_PRODUCT_DELETE_LOG FOR PRODUCT AFTER DELETE
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, OLD."USER", CURRENT_TIMESTAMP, 
            'DELETED THE CODE PRODUCT: ' || OLD.PROD_ID, 
            'PRODUCT', OLD.COM_ID, 'DELETE', OLD.PROD_ID);
END;

CREATE TRIGGER TRG_PRODUCT_INSERT_LOG FOR PRODUCT AFTER INSERT
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, NEW."USER", CURRENT_TIMESTAMP, 
            'REGISTERING NEW CODE PRODUCT: ' || NEW.PROD_ID, 
            'PRODUCT', NEW.COM_ID, 'INSERT', NEW.PROD_ID);
END;

CREATE TRIGGER TRG_PRODUCT_UPDATE_LOG FOR PRODUCT AFTER UPDATE
AS
DECLARE MAX_LANCTO INT;
BEGIN
    SELECT COALESCE(MAX(LANCTO), 0) + 1 
    FROM LOGS 
    INTO :MAX_LANCTO;
    INSERT INTO LOGS (LANCTO, "USER", "DATE", DESCRIPTION, PAGE, COMPANY, "ACTION", "KEY")
    VALUES (:MAX_LANCTO, NEW."USER", CURRENT_TIMESTAMP, 
            'UPDATING THE CODE PRODUCT: ' || NEW.PROD_ID, 
            'PRODUCT', NEW.COM_ID, 'UPDATE', NEW.PROD_ID);
END;